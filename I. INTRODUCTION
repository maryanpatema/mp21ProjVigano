I. INTRODUCTION
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

I.	Introduction

Interrupts are one of the most fundamental and useful principles of modern embedded processors. A microcontroller normally executes instructions in an orderly fetch then execute sequence depending on how the user would write the code, but it should also be ready to handle any unscheduled events that might occur inside or outside the microcontroller. 
  
The AVR can do this by performing an Interrupt Service Routine (ISR).  Its execution is performed by loading the beginning address of the ISR specific for the interrupt into the program counter then, the AVR processor would start running the ISR. For the ISR to function as planned, there are several conditions that it must meet. This would further be discussed along the way (see section b.4). The interrupt routine is an asynchronous process as these events occur outside the regular execution thread of the main program. It does not do things simultaneously as the regular program is stopped when the ISR runs. By default, interrupts are not interruptible, once it runs, the AVR CPU will automatically disable the Global Interrupt Enable bit to prevent the ISR from being interrupted. This is done to prevent stack overflows from too many interrupts occurring at once and to prevent the ISR from running too long.
  
As microcontrollers can accept inputs from I/O ports, interrupts can also be used for accepting inputs generated by external events. The type of device associated with this is referred to as the external interrupts. These are called on a given status change on the INTn pin. On the ATMEGA328P, all pins can trigger interrupts when they change the state from low to high and vise versa.  Only INT0 and INT1 can be configured to trigger interrupts in a low level and it will trigger continuously until the input is no longer low. The other non-interrupt pins serve as the interrupt handlers, this allows for INT0 and INT1 to handle multiple external interrupts. The pins are grouped into three pin change interrupt vectors, if any pin changes its state, an interrupt will be triggered. 
  
 Thus, interrupts are useful as it is a way for an external or internal event to pause the current processorâ€™s activity so that it can complete a brief task before resuming where it left off. Other uses of interrupts include: serial data transfers, timer interrupts, ADC conversions, etc.

